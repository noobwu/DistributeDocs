<!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<!-- START SNIPPET: example -->
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
  http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd">
	<!-- Allows us to use system properties as variables in this configuration file -->
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<value>file:${activemq.conf}/credentials.properties</value>
		</property>
	</bean>
	<!-- Allows accessing the server log -->
	<bean id="logQuery" class="io.fabric8.insight.log.log4j.Log4jLogQuery" lazy-init="false" scope="singleton" init-method="start" destroy-method="stop"/>
	<!--
        The <broker> element is used to configure the ActiveMQ broker.
    -->
	<broker xmlns="http://activemq.apache.org/schema/core" brokerName="ActiveMQ-MS" dataDirectory="${activemq.data}" schedulerSupport="true" schedulePeriodForDestinationPurge="10000">
		<destinationPolicy>
			<policyMap>
				<policyEntries>
					<policyEntry topic=">">
						<!-- The constantPendingMessageLimitStrategy is used to prevent
                         slow topic consumers to block producers and affect other consumers
                         by limiting the number of messages that are retained
                         For more information, see:

                         http://activemq.apache.org/slow-consumer-handling.html

                    -->
						<pendingMessageLimitStrategy>
							<constantPendingMessageLimitStrategy limit="1000"/>
						</pendingMessageLimitStrategy>
					</policyEntry>
				</policyEntries>
			</policyMap>
		</destinationPolicy>
		<!--
            The managementContext is used to configure how ActiveMQ is exposed in
            JMX. By default, ActiveMQ uses the MBean server that is started by
            the JVM. For more information, see:

            http://activemq.apache.org/jmx.html
        -->
		<managementContext>
			<managementContext createConnector="false"/>
		</managementContext>
		<!--
            Configure message persistence for the broker. The default persistence
            mechanism is the KahaDB store (identified by the kahaDB tag).
            For more information, see:

            http://activemq.apache.org/persistence.html
        -->
		<persistenceAdapter>
			<!-- <kahaDB directory="${activemq.data}/kahadb"/> -->
			<!-- 
				# directory： 存储数据的路径
				# replicas：集群中的节点数【(replicas/2)+1公式表示集群中至少要正常运行的服务数量】，3台集群那么允许1台宕机， 另外两台要正常运行  
				# bind：当该节点成为master后，它将绑定已配置的地址和端口来为复制协议提供服务。还支持使用动态端口。只需使用tcp://0.0.0.0:0进行配置即可，默认端口为61616。 
				# zkAddress：ZK的ip和port， 如果是集群，则用逗号隔开(这里作为简单示例ZooKeeper配置为单点， 这样已经适用于大多数环境了， 集群也就多几个配置) 
				# zkPassword：当连接到ZooKeeper服务器时用的密码，没有密码则不配置。 
				# zkPah：ZK选举信息交换的存贮路径，启动服务后actimvemq会到zookeeper上注册生成此路径   
				# hostname： ActiveMQ所在主机的IP
				# 更多参考：http://activemq.apache.org/replicated-leveldb-store.html
            -->
			<replicatedLevelDB directory="${activemq.data}/leveldb" replicas="1" bind="tcp://0.0.0.0:61826" zkAddress="127.0.0.1:2191,127.0.0.1:2192,127.0.0.1:2193" zkPassword="" hostname="127.0.0.1" sync="local_disk" zkPath="/activemq/ms/leveldb-stores"/>
		</persistenceAdapter>
		<!--
            The systemUsage controls the maximum amount of space the broker will
            use before disabling caching and/or slowing down producers. For more information, see:
            http://activemq.apache.org/producer-flow-control.html
          -->
		<systemUsage>
			<systemUsage>
				<memoryUsage>
					<memoryUsage percentOfJvmHeap="70"/>
				</memoryUsage>
				<storeUsage>
					<storeUsage limit="100 gb"/>
				</storeUsage>
				<tempUsage>
					<tempUsage limit="50 gb"/>
				</tempUsage>
			</systemUsage>
		</systemUsage>
		<!--
            The transport connectors expose ActiveMQ over a given protocol to
            clients and other brokers. For more information, see:

            http://activemq.apache.org/configuring-transports.html
        -->
		<transportConnectors>
			<!-- DOS protection, limit concurrent connections to 1000 and frame size to 100MB -->
			<transportConnector name="openwire" uri="tcp://0.0.0.0:61816?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/>
			<!-- <transportConnector name="amqp" uri="amqp://0.0.0.0:5672?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/> -->
			<!-- <transportConnector name="stomp" uri="stomp://0.0.0.0:61613?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/> -->
			<!-- <transportConnector name="mqtt" uri="mqtt://0.0.0.0:1883?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/> -->
			<!-- <transportConnector name="ws" uri="ws://0.0.0.0:61614?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/> -->
		</transportConnectors>
		<!-- destroy the spring context on shutdown to stop jetty -->
		<shutdownHooks>
			<bean xmlns="http://www.springframework.org/schema/beans" class="org.apache.activemq.hooks.SpringContextHook"/>
		</shutdownHooks>
	</broker>
	<!--
        Enable web consoles, REST and Ajax APIs and demos
        The web consoles requires by default login, you can disable this in the jetty.xml file

        Take a look at ${ACTIVEMQ_HOME}/conf/jetty.xml for more details
    -->
	<import resource="jetty.xml"/>
</beans>
<!-- END SNIPPET: example -->